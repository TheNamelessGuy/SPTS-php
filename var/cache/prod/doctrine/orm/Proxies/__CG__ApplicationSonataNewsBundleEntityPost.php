<?php

namespace Proxies\__CG__\Application\Sonata\NewsBundle\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \Application\Sonata\NewsBundle\Entity\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'title', 'slug', 'abstract', 'content', 'rawContent', 'contentFormatter', 'tags', 'comments', 'enabled', 'publicationDateStart', 'createdAt', 'updatedAt', 'commentsEnabled', 'commentsCloseAt', 'commentsDefaultStatus', 'commentsCount', 'author', 'image', 'collection'];
        }

        return ['__isInitialized__', 'id', 'title', 'slug', 'abstract', 'content', 'rawContent', 'contentFormatter', 'tags', 'comments', 'enabled', 'publicationDateStart', 'createdAt', 'updatedAt', 'commentsEnabled', 'commentsCloseAt', 'commentsDefaultStatus', 'commentsCount', 'author', 'image', 'collection'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setAbstract($abstract)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAbstract', [$abstract]);

        return parent::setAbstract($abstract);
    }

    /**
     * {@inheritDoc}
     */
    public function getAbstract()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAbstract', []);

        return parent::getAbstract();
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($content)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', [$content]);

        return parent::setContent($content);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', []);

        return parent::getContent();
    }

    /**
     * {@inheritDoc}
     */
    public function setEnabled($enabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEnabled', [$enabled]);

        return parent::setEnabled($enabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEnabled', []);

        return parent::getEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setSlug($slug)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSlug', [$slug]);

        return parent::setSlug($slug);
    }

    /**
     * {@inheritDoc}
     */
    public function getSlug()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSlug', []);

        return parent::getSlug();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublicationDateStart(\DateTime $publicationDateStart = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublicationDateStart', [$publicationDateStart]);

        return parent::setPublicationDateStart($publicationDateStart);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublicationDateStart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublicationDateStart', []);

        return parent::getPublicationDateStart();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt(\DateTime $createdAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt(\DateTime $updatedAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function addComments(\Sonata\NewsBundle\Model\CommentInterface $comment)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addComments', [$comment]);

        return parent::addComments($comment);
    }

    /**
     * {@inheritDoc}
     */
    public function setComments($comments)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setComments', [$comments]);

        return parent::setComments($comments);
    }

    /**
     * {@inheritDoc}
     */
    public function getComments()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getComments', []);

        return parent::getComments();
    }

    /**
     * {@inheritDoc}
     */
    public function addTags(\Sonata\ClassificationBundle\Model\TagInterface $tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addTags', [$tags]);

        return parent::addTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function getTags()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTags', []);

        return parent::getTags();
    }

    /**
     * {@inheritDoc}
     */
    public function setTags($tags)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTags', [$tags]);

        return parent::setTags($tags);
    }

    /**
     * {@inheritDoc}
     */
    public function prePersist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'prePersist', []);

        return parent::prePersist();
    }

    /**
     * {@inheritDoc}
     */
    public function preUpdate()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preUpdate', []);

        return parent::preUpdate();
    }

    /**
     * {@inheritDoc}
     */
    public function getYear()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getYear', []);

        return parent::getYear();
    }

    /**
     * {@inheritDoc}
     */
    public function getMonth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMonth', []);

        return parent::getMonth();
    }

    /**
     * {@inheritDoc}
     */
    public function getDay()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDay', []);

        return parent::getDay();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentsEnabled($commentsEnabled)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentsEnabled', [$commentsEnabled]);

        return parent::setCommentsEnabled($commentsEnabled);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentsEnabled()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentsEnabled', []);

        return parent::getCommentsEnabled();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentsCloseAt(\DateTime $commentsCloseAt = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentsCloseAt', [$commentsCloseAt]);

        return parent::setCommentsCloseAt($commentsCloseAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentsCloseAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentsCloseAt', []);

        return parent::getCommentsCloseAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentsDefaultStatus($commentsDefaultStatus)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentsDefaultStatus', [$commentsDefaultStatus]);

        return parent::setCommentsDefaultStatus($commentsDefaultStatus);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentsDefaultStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentsDefaultStatus', []);

        return parent::getCommentsDefaultStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setCommentsCount($commentsCount)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCommentsCount', [$commentsCount]);

        return parent::setCommentsCount($commentsCount);
    }

    /**
     * {@inheritDoc}
     */
    public function getCommentsCount()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCommentsCount', []);

        return parent::getCommentsCount();
    }

    /**
     * {@inheritDoc}
     */
    public function isCommentable()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isCommentable', []);

        return parent::isCommentable();
    }

    /**
     * {@inheritDoc}
     */
    public function isPublic()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isPublic', []);

        return parent::isPublic();
    }

    /**
     * {@inheritDoc}
     */
    public function setAuthor($author)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAuthor', [$author]);

        return parent::setAuthor($author);
    }

    /**
     * {@inheritDoc}
     */
    public function getAuthor()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAuthor', []);

        return parent::getAuthor();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setCollection(\Sonata\ClassificationBundle\Model\CollectionInterface $collection = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCollection', [$collection]);

        return parent::setCollection($collection);
    }

    /**
     * {@inheritDoc}
     */
    public function getCollection()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCollection', []);

        return parent::getCollection();
    }

    /**
     * {@inheritDoc}
     */
    public function setContentFormatter($contentFormatter)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContentFormatter', [$contentFormatter]);

        return parent::setContentFormatter($contentFormatter);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentFormatter()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentFormatter', []);

        return parent::getContentFormatter();
    }

    /**
     * {@inheritDoc}
     */
    public function setRawContent($rawContent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRawContent', [$rawContent]);

        return parent::setRawContent($rawContent);
    }

    /**
     * {@inheritDoc}
     */
    public function getRawContent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRawContent', []);

        return parent::getRawContent();
    }

}
